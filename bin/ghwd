#!/usr/bin/env bash

usage() {
	printf '%s\n%s\n' \
		'usage '"`basename "${1:-ghwd}"`"' -- open git URL in browser matching current branch and working directory' \
		'ghwd [-rsvh] [file]' 
	exit 64;
}
declare verbosity=1 #defaults to verbose
declare f_return_only=0

while getopts ":rsvh" opt "$@"; do
	case "$opt" in
		(r)
			#return mode returns the url, but does not open it
			verbosity=1
			f_return_only=1
			;;
		(s)
			verbosity=0
			;;
		(v)
			let "++verbosity"
			;;
		(h)
			usage
			;;
		(\?) 
			printf 'unknown argument '"$OPTARG"'' >&2
			exit 1;
			;;
	esac
done
shift $((OPTIND-1))

# Figure out github repo base URL
base_url=$(git config --get remote.origin.url)
base_url=${base_url%\.git} # remove .git from end of string

# Fix git@github.com: URLs
base_url=${base_url//git@github\.com:/https:\/\/github\.com\/}

# Fix git://github.com URLS
base_url=${base_url//git:\/\/github\.com/https:\/\/github\.com\/}

# Fix git@bitbucket.org: URLs
base_url=${base_url//git@bitbucket.org:/https:\/\/bitbucket\.org\/}

# Fix git@gitlab.com: URLs
base_url=${base_url//git@gitlab\.com:/https:\/\/gitlab\.com\/}

# Validate that this folder is a git folder
git branch 2>/dev/null 1>&2
if [ $? -ne 0 ]; then
  echo "Not a git repo!" >&2
  exit $?
fi

# Find current directory relative to .git parent
full_path="$(pwd)"
git_base_path="$(cd ./$(git rev-parse --show-cdup); pwd)"
relative_path="${full_path#$git_base_path}" # remove leading git_base_path from working directory

# If filename argument is present, append it
if [ "$1" ]; then
  relative_path="$relative_path/$1"
fi

# Figure out current git branch
# git_where=$(command git symbolic-ref -q HEAD || command git name-rev --name-only --no-undefined --always HEAD) 2>/dev/null
git_where="$(command git name-rev --name-only --no-undefined --always HEAD)" 2>/dev/null

# Remove cruft from branchname
branch="${git_where#refs\/heads\/}"
branch="${git_where#remotes\/origin\/}"
branch="${branch#tags\/}"
branch="${branch%^0}"

[[ $base_url == *bitbucket* ]] && tree="src" || tree="tree"
url="$base_url/$tree/$branch$relative_path"

test $verbosity -ge 1 && echo "$url"

# Check for various OS openers. Quit as soon as we find one that works.
# Don't assume this will work, provide a helpful diagnostic if it fails.
for opener in xdg-open open cygstart "start"; {
  if command -v $opener &>/dev/null; then
    open=$opener;
    break;
  fi
}

if [ $f_return_only -ne 1 ]; then
	$open "$url" || { echo "Unrecognized OS: Expected to find one of the following launch commands: xdg-open, open, cygstart, start"; exit 1; }
fi

# vim: set ts=4 sw=4 noexpandtab:
